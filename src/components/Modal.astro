---
interface Props {
  title: string;
  icon?: string;
}

const { title, icon } = Astro.props;
---

<div id="modal-overlay" class="modal-overlay hidden" aria-hidden="true">
  <div class="modal" role="dialog" aria-modal="true">
    <header class="modal-header">
      <div class="header-left">
        {icon && (
          <div class="card-icon">
            <img src={icon} alt="Logo" />
          </div>
        )}
        <h2>{title}</h2>
      </div>
      <button class="close-button" aria-label="Close modal">
        <i class="fas fa-times"></i>
      </button>
    </header>

    <!-- Here's where we'll dump our MD-rendered HTML -->
    <section class="modal-body"></section>
  </div>
</div>

<script type="module" lang="ts">
  function setupModal() {
    const overlay = document.getElementById('modal-overlay');
    const closeBtn = overlay?.querySelector('.close-button');
    const modalTitle = overlay?.querySelector('h2');
    const modalBody = overlay?.querySelector('.modal-body');
    const timelineCards = document.querySelectorAll('.timeline-card');
    const projectCards = document.querySelectorAll('.project-content-card');
    const aboutCards = document.querySelectorAll('.about-content-card');
    /** @type {HTMLElement | null} */
    const mobileHeader = document.querySelector('.mobile-header');

    /** @param {string} titleText @param {string} bodyHtml @param {string} iconClass */
    function openModal(titleText, bodyHtml, iconClass = '') {
      if (!overlay || !modalTitle || !modalBody) return;
      modalTitle.textContent = titleText;
      modalBody.innerHTML = bodyHtml;
      
      // Update icon if present
      const iconContainer = overlay.querySelector('.card-icon');
      if (iconContainer) {
        // Handle both image and font-awesome icons
        if (iconClass.startsWith('fas ')) {
          iconContainer.innerHTML = `<i class="${iconClass}"></i>`;
          iconContainer.style.display = 'block';
        } else if (iconClass) {
          iconContainer.innerHTML = `<img src="${iconClass}" alt="${titleText}" />`;
          iconContainer.style.display = 'block';
        } else {
          iconContainer.style.display = 'none';
        }
      }
      overlay.classList.remove('hidden');
      if (mobileHeader?.style) mobileHeader.style.display = 'none';
    }

    function closeModal() {
      overlay?.classList.add('hidden');
      if (mobileHeader && window.innerWidth <= 768) {
        mobileHeader.style.display = 'flex';
      }
      // clear out the body so old content doesnâ€™t flash on reopen
      if (modalBody) modalBody.innerHTML = '';
    }

    /** @param {NodeListOf<Element>} cards @param {string} titleSelector @param {boolean} useIconClass */
    function attachListeners(cards, titleSelector = 'h3', useIconClass = false) {
      cards.forEach(card => {
        card.addEventListener('click', () => {
          const title = card.querySelector(titleSelector)?.textContent || '';
          /** @type {HTMLElement | null} */
          const hidden = card.querySelector('.hidden-content');
          const body = hidden ? hidden.innerHTML : '';
          
          let icon = '';
          if (useIconClass) {
            icon = card.querySelector('i')?.className || '';
          } else {
            icon = card.querySelector('img')?.src || '';
          }
          
          openModal(title, body, icon);
        });
      });
    }

    attachListeners(timelineCards);
    attachListeners(projectCards);
    attachListeners(aboutCards, 'h4', true); // Use h4 for title and font-awesome icons

    overlay?.addEventListener('click', e => {
      if (e.target === overlay) closeModal();
    });
    closeBtn?.addEventListener('click', closeModal);

    /** @param {Event} _ */
    const handleResize = (_) => {
      /** @type {HTMLElement | null} */
      const mobileHeader = document.querySelector('.mobile-header');
      if (!mobileHeader) return;
      
      if (window.innerWidth > 768) {
        mobileHeader.style.display = 'none';
      } else if (overlay?.classList.contains('hidden')) {
        mobileHeader.style.display = 'flex';
      }
    };

    window.addEventListener('resize', handleResize);
  }

  document.addEventListener('DOMContentLoaded', setupModal);
  document.addEventListener('astro:page-load', setupModal);
</script>