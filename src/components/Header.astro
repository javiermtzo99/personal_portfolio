---
const { currentPath } = Astro.props;

const menuItems = [
  { path: '/about', icon: 'fa-address-card', text: 'About' },
  { path: '/education', icon: 'fa-school', text: 'Education' },
  { path: '/work_experience', icon: 'fa-briefcase', text: 'Work Exp' },
  { path: '/projects', icon: 'fa-code', text: 'Projects' },
  { path: '/contact', icon: 'fa-envelope', text: 'Contact' }
];

function getClassNameFor(path: string) {
  // Check if the current path starts with the menu item path
  // This handles both exact matches and dynamic routes like /work_experience/[id]
  if (
    (path === '/work_experience' && currentPath.startsWith('/work_experience/')) ||
    (path === '/education' && currentPath.startsWith('/education/')) ||
    (path === '/about' && currentPath.startsWith('/about/')) ||
    (path === '/projects' && currentPath.startsWith('/projects/'))
  ) {
    return 'header-section active';
  }
  
  // For other sections, use exact match
  return currentPath === path ? 'header-section active' : 'header-section';
}

const getCurrentMenuItem = () => {
  // First check for exact match
  const exactMatch = menuItems.find(item => item.path === currentPath);
  if (exactMatch) return exactMatch;
  
  // Check for dynamic routes
  if (currentPath.startsWith('/work_experience/')) {
    return menuItems.find(item => item.path === '/work_experience');
  }
  if (currentPath.startsWith('/education/')) {
    return menuItems.find(item => item.path === '/education');
  }
  if (currentPath.startsWith('/about/')) {
    return menuItems.find(item => item.path === '/about');
  }
  if (currentPath.startsWith('/projects/')) {
    return menuItems.find(item => item.path === '/projects');
  }
  
  // Default to first item if no match
  return menuItems[0];
};
---

<script>
  let isOpen = false;
  const dropdown = document.querySelector('.dropdown-menu');
  const mobileMenuItems = document.querySelector('.mobile-menu-items');
  const menuArrow = document.querySelector('.menu-arrow i');

  function toggleDropdown() {
    isOpen = !isOpen;
    if (mobileMenuItems) {
      mobileMenuItems.classList.toggle('show');
    }
    if (menuArrow) {
      menuArrow.classList.replace(
        `fa-chevron-${isOpen ? 'down' : 'up'}`,
        `fa-chevron-${isOpen ? 'up' : 'down'}`
      );
    }
  }

  if (dropdown) {
    dropdown.addEventListener('click', toggleDropdown);
  }
</script>

{/* Mobile Header */}
<div class="mobile-header">
  <div class="dropdown-menu">
    <div class="menu-content">
      <div class="menu-icon">
        <i class={`fa-solid ${getCurrentMenuItem()?.icon || 'fa-home'}`}></i>
      </div>
      <div class="menu-text">{getCurrentMenuItem()?.text || 'Menu'}</div>
    </div>
    <div class="menu-arrow">
      <i class="fa-solid fa-chevron-down"></i>
    </div>
  </div>
  <div class="mobile-menu-items">
    {menuItems.map((item) => (
      <a 
        href={`${item.path}#main-area`}
        class={currentPath === item.path || 
               (item.path === '/work_experience' && currentPath.startsWith('/work_experience/')) ||
               (item.path === '/education' && currentPath.startsWith('/education/')) ||
               (item.path === '/about' && currentPath.startsWith('/about/')) ||
               (item.path === '/projects' && currentPath.startsWith('/projects/')) ? 'active' : ''}
        data-astro-reload={false}
        data-astro-prefetch
      >
        <div class="mobile-menu-item">
          <i class={`fa-solid ${item.icon}`}></i>
          <span>{item.text}</span>
        </div>
      </a>
    ))}
  </div>
</div>

{/* Desktop Header */}
<div class="site-header">
  {menuItems.map((item) => (
    <a 
      href={`${item.path}#main-area`}
      data-astro-reload={false}
      data-astro-prefetch
    >
      <div class={getClassNameFor(item.path)}>
        <div class="header-icon">
          <i class={`fa-solid ${item.icon}`}></i>
        </div>
        <p>{item.text}</p>
      </div>
    </a>
  ))}
</div>

